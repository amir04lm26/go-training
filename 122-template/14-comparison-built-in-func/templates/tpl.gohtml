<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <title>Hello World!</title>
  </head>
  <body>
  {{if gt .Score1 .Score2}}
  SCORE1 > SCORE 2
  {{end}}

  {{if lt .Score1 .Score2}}
  SCORE1 < SCORE 2
  {{end}}

  {{if eq .Score1 .Score2}}
  SCORE1 == SCORE 2
  {{end}}

  {{if lt .Score1 10}}
  SCORE1 < 10
  {{end}}

  <!-- Removing white spaces -->
  {{/* a comment */}}
  {{- /* A comment with white space trimmed from preceding and following text */ -}}
  {{if gt .Score1 .Score2 -}}
  SCORE1 > SCORE 2
  {{end -}}

  {{if lt .Score1 .Score2 -}}
  SCORE1 < SCORE 2
  {{end -}}

  {{if eq .Score1 .Score2 -}}
  SCORE1 == SCORE 2
  {{end -}}

  {{if lt .Score1 10 -}}
  SCORE1 < 10
  {{end -}}

  {{if lt .Score1 10 -}} .Score1 {{else}} 10 {{end}}
  {{if gt .Score1 10 -}} .Score1 {{else if gt .Score2 10}} .Score2 {{else}} 10 {{end -}}

  {{/*
    {{range pipeline}}
    T1 {{else}} T0 {{ end }}
    {{ break }}
    {{ continue }}

    {{template "name"}}
    The template with the specified name is executed with nil data.

    {{template "name" pipeline}}
    The template with the specified name is executed with dot set to the value
    of the pipeline.

    {{block "name" pipeline}} T1 {{ end }}
    A block is shorthand for defining a template

    {{define "name"}} T1 {{ end }}
    and then executing it in place

    {{template "name" pipeline}}
    The typical use is to define a set of root templates that are then
    customized by redefining the block templates within.

    {{with pipeline}} T1 {{end}}
    If the value of the pipeline is empty, no output is generated;
    otherwise, dot is set to the value of the pipeline and T1 is
    executed.
    {{with pipeline}} T1 {{else}} T0 {{end}}
    {{with pipeline}} T1 {{else with pipeline}} T0 {{end}}
    */}}

    {{/*
      and
        Returns the boolean AND of its arguments by returning the
        first empty argument or the last argument. That is,
        "and x y" behaves as "if x then y else x."
        Evaluation proceeds through the arguments left to right
        and returns when the result is determined.
      call
        Returns the result of calling the first argument, which
        must be a function, with the remaining arguments as parameters.
        Thus "call .X.Y 1 2" is, in Go notation, dot.X.Y(1, 2) where
        Y is a func-valued field, map entry, or the like.
        The first argument must be the result of an evaluation
        that yields a value of function type (as distinct from
        a predefined function such as print). The function must
        return either one or two result values, the second of which
        is of type error. If the arguments don't match the function
        or the returned error value is non-nil, execution stops.
      html
        Returns the escaped HTML equivalent of the textual
        representation of its arguments. This function is unavailable
        in html/template, with a few exceptions.
      index
        Returns the result of indexing its first argument by the
        following arguments. Thus "index x 1 2 3" is, in Go syntax,
        x[1][2][3]. Each indexed item must be a map, slice, or array.
      slice
        slice returns the result of slicing its first argument by the
        remaining arguments. Thus "slice x 1 2" is, in Go syntax, x[1:2],
        while "slice x" is x[:], "slice x 1" is x[1:], and "slice x 1 2 3"
        is x[1:2:3]. The first argument must be a string, slice, or array.
      js
        Returns the escaped JavaScript equivalent of the textual
        representation of its arguments.
      len
        Returns the integer length of its argument.
      not
        Returns the boolean negation of its single argument.
      or
        Returns the boolean OR of its arguments by returning the
        first non-empty argument or the last argument, that is,
        "or x y" behaves as "if x then x else y".
        Evaluation proceeds through the arguments left to right
        and returns when the result is determined.
      print
        An alias for fmt.Sprint
      printf
        An alias for fmt.Sprintf
      println
        An alias for fmt.Sprintln
      urlquery
        Returns the escaped value of the textual representation of
        its arguments in a form suitable for embedding in a URL query.
        This function is unavailable in html/template, with a few
        exceptions.  
    */}}

    {{/*
      eq
        Returns the boolean truth of arg1 == arg2
      ne
        Returns the boolean truth of arg1 != arg2
      lt
        Returns the boolean truth of arg1 < arg2
      le
        Returns the boolean truth of arg1 <= arg2
      gt
        Returns the boolean truth of arg1 > arg2
      ge
        Returns the boolean truth of arg1 >= arg2  
    */}}
  </body>
</html>
